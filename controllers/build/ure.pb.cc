// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ure.proto

#include "ure.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace UreMessage {
constexpr JointDegree::JointDegree(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arm_degree_list_()
  , finger_degree_list_(){}
struct JointDegreeDefaultTypeInternal {
  constexpr JointDegreeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JointDegreeDefaultTypeInternal() {}
  union {
    JointDegree _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JointDegreeDefaultTypeInternal _JointDegree_default_instance_;
constexpr SensorData::SensorData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : elbow_(0)
  , shoulder_lift_(0)
  , shoulder_pan_(0)
  , wrist_1_(0)
  , wrist_2_(0)
  , wrist_3_(0){}
struct SensorDataDefaultTypeInternal {
  constexpr SensorDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SensorDataDefaultTypeInternal() {}
  union {
    SensorData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SensorDataDefaultTypeInternal _SensorData_default_instance_;
}  // namespace UreMessage
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ure_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ure_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ure_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ure_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UreMessage::JointDegree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UreMessage::JointDegree, arm_degree_list_),
  PROTOBUF_FIELD_OFFSET(::UreMessage::JointDegree, finger_degree_list_),
  PROTOBUF_FIELD_OFFSET(::UreMessage::SensorData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UreMessage::SensorData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UreMessage::SensorData, elbow_),
  PROTOBUF_FIELD_OFFSET(::UreMessage::SensorData, shoulder_lift_),
  PROTOBUF_FIELD_OFFSET(::UreMessage::SensorData, shoulder_pan_),
  PROTOBUF_FIELD_OFFSET(::UreMessage::SensorData, wrist_1_),
  PROTOBUF_FIELD_OFFSET(::UreMessage::SensorData, wrist_2_),
  PROTOBUF_FIELD_OFFSET(::UreMessage::SensorData, wrist_3_),
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::UreMessage::JointDegree)},
  { 7, 18, sizeof(::UreMessage::SensorData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UreMessage::_JointDegree_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UreMessage::_SensorData_default_instance_),
};

const char descriptor_table_protodef_ure_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ture.proto\022\nUreMessage\"\335\003\n\013JointDegree\022"
  "\027\n\017arm_degree_list\030\001 \003(\002\022\032\n\022finger_degre"
  "e_list\030\002 \003(\002\"\222\002\n\tFingerNum\022\027\n\023palm_finge"
  "r_1_joint\020\001\022\024\n\020finger_1_joint_1\020\002\022\024\n\020fin"
  "ger_1_joint_2\020\003\022\024\n\020finger_1_joint_3\020\004\022\027\n"
  "\023palm_finger_2_joint\020\005\022\024\n\020finger_2_joint"
  "_1\020\006\022\024\n\020finger_2_joint_2\020\007\022\024\n\020finger_2_j"
  "oint_3\020\010\022\031\n\025finger_middle_joint_1\020\t\022\031\n\025f"
  "inger_middle_joint_2\020\n\022\031\n\025finger_middle_"
  "joint_3\020\013\"\203\001\n\006ArmNum\022\026\n\022shoulder_pan_joi"
  "nt\020\000\022\027\n\023shoulder_lift_joint\020\001\022\017\n\013elbow_j"
  "oint\020\002\022\021\n\rwrist_1_joint\020\003\022\021\n\rwrist_2_joi"
  "nt\020\004\022\021\n\rwrist_3_joint\020\005\"\256\002\n\nSensorData\022\r"
  "\n\005elbow\030\001 \002(\002\022\025\n\rshoulder_lift\030\002 \002(\002\022\024\n\014"
  "shoulder_pan\030\003 \002(\002\022\017\n\007wrist_1\030\004 \002(\002\022\017\n\007w"
  "rist_2\030\005 \002(\002\022\017\n\007wrist_3\030\006 \002(\002\"\260\001\n\tSensor"
  "Num\022\026\n\022elbow_joint_sensor\020\001\022\036\n\032shoulder_"
  "lift_joint_sensor\020\002\022\035\n\031shoulder_pan_join"
  "t_sensor\020\003\022\030\n\024wrist_1_joint_sensor\020\004\022\030\n\024"
  "wrist_2_joint_sensor\020\005\022\030\n\024wrist_3_joint_"
  "sensor\020\006"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ure_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ure_2eproto = {
  false, false, 808, descriptor_table_protodef_ure_2eproto, "ure.proto", 
  &descriptor_table_ure_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_ure_2eproto::offsets,
  file_level_metadata_ure_2eproto, file_level_enum_descriptors_ure_2eproto, file_level_service_descriptors_ure_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_ure_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ure_2eproto);
  return descriptor_table_ure_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ure_2eproto(&descriptor_table_ure_2eproto);
namespace UreMessage {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JointDegree_FingerNum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ure_2eproto);
  return file_level_enum_descriptors_ure_2eproto[0];
}
bool JointDegree_FingerNum_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr JointDegree_FingerNum JointDegree::palm_finger_1_joint;
constexpr JointDegree_FingerNum JointDegree::finger_1_joint_1;
constexpr JointDegree_FingerNum JointDegree::finger_1_joint_2;
constexpr JointDegree_FingerNum JointDegree::finger_1_joint_3;
constexpr JointDegree_FingerNum JointDegree::palm_finger_2_joint;
constexpr JointDegree_FingerNum JointDegree::finger_2_joint_1;
constexpr JointDegree_FingerNum JointDegree::finger_2_joint_2;
constexpr JointDegree_FingerNum JointDegree::finger_2_joint_3;
constexpr JointDegree_FingerNum JointDegree::finger_middle_joint_1;
constexpr JointDegree_FingerNum JointDegree::finger_middle_joint_2;
constexpr JointDegree_FingerNum JointDegree::finger_middle_joint_3;
constexpr JointDegree_FingerNum JointDegree::FingerNum_MIN;
constexpr JointDegree_FingerNum JointDegree::FingerNum_MAX;
constexpr int JointDegree::FingerNum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JointDegree_ArmNum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ure_2eproto);
  return file_level_enum_descriptors_ure_2eproto[1];
}
bool JointDegree_ArmNum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr JointDegree_ArmNum JointDegree::shoulder_pan_joint;
constexpr JointDegree_ArmNum JointDegree::shoulder_lift_joint;
constexpr JointDegree_ArmNum JointDegree::elbow_joint;
constexpr JointDegree_ArmNum JointDegree::wrist_1_joint;
constexpr JointDegree_ArmNum JointDegree::wrist_2_joint;
constexpr JointDegree_ArmNum JointDegree::wrist_3_joint;
constexpr JointDegree_ArmNum JointDegree::ArmNum_MIN;
constexpr JointDegree_ArmNum JointDegree::ArmNum_MAX;
constexpr int JointDegree::ArmNum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorData_SensorNum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ure_2eproto);
  return file_level_enum_descriptors_ure_2eproto[2];
}
bool SensorData_SensorNum_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SensorData_SensorNum SensorData::elbow_joint_sensor;
constexpr SensorData_SensorNum SensorData::shoulder_lift_joint_sensor;
constexpr SensorData_SensorNum SensorData::shoulder_pan_joint_sensor;
constexpr SensorData_SensorNum SensorData::wrist_1_joint_sensor;
constexpr SensorData_SensorNum SensorData::wrist_2_joint_sensor;
constexpr SensorData_SensorNum SensorData::wrist_3_joint_sensor;
constexpr SensorData_SensorNum SensorData::SensorNum_MIN;
constexpr SensorData_SensorNum SensorData::SensorNum_MAX;
constexpr int SensorData::SensorNum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class JointDegree::_Internal {
 public:
};

JointDegree::JointDegree(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arm_degree_list_(arena),
  finger_degree_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UreMessage.JointDegree)
}
JointDegree::JointDegree(const JointDegree& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arm_degree_list_(from.arm_degree_list_),
      finger_degree_list_(from.finger_degree_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:UreMessage.JointDegree)
}

void JointDegree::SharedCtor() {
}

JointDegree::~JointDegree() {
  // @@protoc_insertion_point(destructor:UreMessage.JointDegree)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JointDegree::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JointDegree::ArenaDtor(void* object) {
  JointDegree* _this = reinterpret_cast< JointDegree* >(object);
  (void)_this;
}
void JointDegree::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JointDegree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JointDegree::Clear() {
// @@protoc_insertion_point(message_clear_start:UreMessage.JointDegree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arm_degree_list_.Clear();
  finger_degree_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointDegree::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float arm_degree_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_arm_degree_list(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_arm_degree_list(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float finger_degree_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_finger_degree_list(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_finger_degree_list(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JointDegree::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UreMessage.JointDegree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float arm_degree_list = 1;
  for (int i = 0, n = this->_internal_arm_degree_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_arm_degree_list(i), target);
  }

  // repeated float finger_degree_list = 2;
  for (int i = 0, n = this->_internal_finger_degree_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_finger_degree_list(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UreMessage.JointDegree)
  return target;
}

size_t JointDegree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UreMessage.JointDegree)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float arm_degree_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_arm_degree_list_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_arm_degree_list_size());
    total_size += data_size;
  }

  // repeated float finger_degree_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_finger_degree_list_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_finger_degree_list_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointDegree::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UreMessage.JointDegree)
  GOOGLE_DCHECK_NE(&from, this);
  const JointDegree* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JointDegree>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UreMessage.JointDegree)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UreMessage.JointDegree)
    MergeFrom(*source);
  }
}

void JointDegree::MergeFrom(const JointDegree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UreMessage.JointDegree)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arm_degree_list_.MergeFrom(from.arm_degree_list_);
  finger_degree_list_.MergeFrom(from.finger_degree_list_);
}

void JointDegree::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UreMessage.JointDegree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointDegree::CopyFrom(const JointDegree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UreMessage.JointDegree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointDegree::IsInitialized() const {
  return true;
}

void JointDegree::InternalSwap(JointDegree* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arm_degree_list_.InternalSwap(&other->arm_degree_list_);
  finger_degree_list_.InternalSwap(&other->finger_degree_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JointDegree::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SensorData::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorData>()._has_bits_);
  static void set_has_elbow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shoulder_lift(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_shoulder_pan(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wrist_1(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_wrist_2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_wrist_3(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

SensorData::SensorData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UreMessage.SensorData)
}
SensorData::SensorData(const SensorData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&elbow_, &from.elbow_,
    static_cast<size_t>(reinterpret_cast<char*>(&wrist_3_) -
    reinterpret_cast<char*>(&elbow_)) + sizeof(wrist_3_));
  // @@protoc_insertion_point(copy_constructor:UreMessage.SensorData)
}

void SensorData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&elbow_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&wrist_3_) -
    reinterpret_cast<char*>(&elbow_)) + sizeof(wrist_3_));
}

SensorData::~SensorData() {
  // @@protoc_insertion_point(destructor:UreMessage.SensorData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SensorData::ArenaDtor(void* object) {
  SensorData* _this = reinterpret_cast< SensorData* >(object);
  (void)_this;
}
void SensorData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:UreMessage.SensorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&elbow_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wrist_3_) -
        reinterpret_cast<char*>(&elbow_)) + sizeof(wrist_3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float elbow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_elbow(&has_bits);
          elbow_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float shoulder_lift = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_shoulder_lift(&has_bits);
          shoulder_lift_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float shoulder_pan = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_shoulder_pan(&has_bits);
          shoulder_pan_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float wrist_1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_wrist_1(&has_bits);
          wrist_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float wrist_2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_wrist_2(&has_bits);
          wrist_2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float wrist_3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_wrist_3(&has_bits);
          wrist_3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UreMessage.SensorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float elbow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_elbow(), target);
  }

  // required float shoulder_lift = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_shoulder_lift(), target);
  }

  // required float shoulder_pan = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_shoulder_pan(), target);
  }

  // required float wrist_1 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_wrist_1(), target);
  }

  // required float wrist_2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_wrist_2(), target);
  }

  // required float wrist_3 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_wrist_3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UreMessage.SensorData)
  return target;
}

size_t SensorData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UreMessage.SensorData)
  size_t total_size = 0;

  if (_internal_has_elbow()) {
    // required float elbow = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_shoulder_lift()) {
    // required float shoulder_lift = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_shoulder_pan()) {
    // required float shoulder_pan = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_wrist_1()) {
    // required float wrist_1 = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_wrist_2()) {
    // required float wrist_2 = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_wrist_3()) {
    // required float wrist_3 = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SensorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UreMessage.SensorData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required float elbow = 1;
    total_size += 1 + 4;

    // required float shoulder_lift = 2;
    total_size += 1 + 4;

    // required float shoulder_pan = 3;
    total_size += 1 + 4;

    // required float wrist_1 = 4;
    total_size += 1 + 4;

    // required float wrist_2 = 5;
    total_size += 1 + 4;

    // required float wrist_3 = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UreMessage.SensorData)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UreMessage.SensorData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UreMessage.SensorData)
    MergeFrom(*source);
  }
}

void SensorData::MergeFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UreMessage.SensorData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      elbow_ = from.elbow_;
    }
    if (cached_has_bits & 0x00000002u) {
      shoulder_lift_ = from.shoulder_lift_;
    }
    if (cached_has_bits & 0x00000004u) {
      shoulder_pan_ = from.shoulder_pan_;
    }
    if (cached_has_bits & 0x00000008u) {
      wrist_1_ = from.wrist_1_;
    }
    if (cached_has_bits & 0x00000010u) {
      wrist_2_ = from.wrist_2_;
    }
    if (cached_has_bits & 0x00000020u) {
      wrist_3_ = from.wrist_3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UreMessage.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorData::CopyFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UreMessage.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SensorData::InternalSwap(SensorData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorData, wrist_3_)
      + sizeof(SensorData::wrist_3_)
      - PROTOBUF_FIELD_OFFSET(SensorData, elbow_)>(
          reinterpret_cast<char*>(&elbow_),
          reinterpret_cast<char*>(&other->elbow_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace UreMessage
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::UreMessage::JointDegree* Arena::CreateMaybeMessage< ::UreMessage::JointDegree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UreMessage::JointDegree >(arena);
}
template<> PROTOBUF_NOINLINE ::UreMessage::SensorData* Arena::CreateMaybeMessage< ::UreMessage::SensorData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UreMessage::SensorData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
