// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ure.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ure_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ure_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ure_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ure_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ure_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_ure_2eproto_metadata_getter(int index);
namespace UreMessage {
class JointDegree;
struct JointDegreeDefaultTypeInternal;
extern JointDegreeDefaultTypeInternal _JointDegree_default_instance_;
class SensorData;
struct SensorDataDefaultTypeInternal;
extern SensorDataDefaultTypeInternal _SensorData_default_instance_;
}  // namespace UreMessage
PROTOBUF_NAMESPACE_OPEN
template<> ::UreMessage::JointDegree* Arena::CreateMaybeMessage<::UreMessage::JointDegree>(Arena*);
template<> ::UreMessage::SensorData* Arena::CreateMaybeMessage<::UreMessage::SensorData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace UreMessage {

enum JointDegree_FingerNum : int {
  JointDegree_FingerNum_palm_finger_1_joint = 1,
  JointDegree_FingerNum_finger_1_joint_1 = 2,
  JointDegree_FingerNum_finger_1_joint_2 = 3,
  JointDegree_FingerNum_finger_1_joint_3 = 4,
  JointDegree_FingerNum_palm_finger_2_joint = 5,
  JointDegree_FingerNum_finger_2_joint_1 = 6,
  JointDegree_FingerNum_finger_2_joint_2 = 7,
  JointDegree_FingerNum_finger_2_joint_3 = 8,
  JointDegree_FingerNum_finger_middle_joint_1 = 9,
  JointDegree_FingerNum_finger_middle_joint_2 = 10,
  JointDegree_FingerNum_finger_middle_joint_3 = 11
};
bool JointDegree_FingerNum_IsValid(int value);
constexpr JointDegree_FingerNum JointDegree_FingerNum_FingerNum_MIN = JointDegree_FingerNum_palm_finger_1_joint;
constexpr JointDegree_FingerNum JointDegree_FingerNum_FingerNum_MAX = JointDegree_FingerNum_finger_middle_joint_3;
constexpr int JointDegree_FingerNum_FingerNum_ARRAYSIZE = JointDegree_FingerNum_FingerNum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JointDegree_FingerNum_descriptor();
template<typename T>
inline const std::string& JointDegree_FingerNum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JointDegree_FingerNum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JointDegree_FingerNum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JointDegree_FingerNum_descriptor(), enum_t_value);
}
inline bool JointDegree_FingerNum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, JointDegree_FingerNum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JointDegree_FingerNum>(
    JointDegree_FingerNum_descriptor(), name, value);
}
enum JointDegree_ArmNum : int {
  JointDegree_ArmNum_shoulder_pan_joint = 0,
  JointDegree_ArmNum_shoulder_lift_joint = 1,
  JointDegree_ArmNum_elbow_joint = 2,
  JointDegree_ArmNum_wrist_1_joint = 3,
  JointDegree_ArmNum_wrist_2_joint = 4,
  JointDegree_ArmNum_wrist_3_joint = 5
};
bool JointDegree_ArmNum_IsValid(int value);
constexpr JointDegree_ArmNum JointDegree_ArmNum_ArmNum_MIN = JointDegree_ArmNum_shoulder_pan_joint;
constexpr JointDegree_ArmNum JointDegree_ArmNum_ArmNum_MAX = JointDegree_ArmNum_wrist_3_joint;
constexpr int JointDegree_ArmNum_ArmNum_ARRAYSIZE = JointDegree_ArmNum_ArmNum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JointDegree_ArmNum_descriptor();
template<typename T>
inline const std::string& JointDegree_ArmNum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JointDegree_ArmNum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JointDegree_ArmNum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JointDegree_ArmNum_descriptor(), enum_t_value);
}
inline bool JointDegree_ArmNum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, JointDegree_ArmNum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JointDegree_ArmNum>(
    JointDegree_ArmNum_descriptor(), name, value);
}
enum SensorData_SensorNum : int {
  SensorData_SensorNum_elbow_joint_sensor = 1,
  SensorData_SensorNum_shoulder_lift_joint_sensor = 2,
  SensorData_SensorNum_shoulder_pan_joint_sensor = 3,
  SensorData_SensorNum_wrist_1_joint_sensor = 4,
  SensorData_SensorNum_wrist_2_joint_sensor = 5,
  SensorData_SensorNum_wrist_3_joint_sensor = 6
};
bool SensorData_SensorNum_IsValid(int value);
constexpr SensorData_SensorNum SensorData_SensorNum_SensorNum_MIN = SensorData_SensorNum_elbow_joint_sensor;
constexpr SensorData_SensorNum SensorData_SensorNum_SensorNum_MAX = SensorData_SensorNum_wrist_3_joint_sensor;
constexpr int SensorData_SensorNum_SensorNum_ARRAYSIZE = SensorData_SensorNum_SensorNum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorData_SensorNum_descriptor();
template<typename T>
inline const std::string& SensorData_SensorNum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SensorData_SensorNum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SensorData_SensorNum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SensorData_SensorNum_descriptor(), enum_t_value);
}
inline bool SensorData_SensorNum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SensorData_SensorNum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SensorData_SensorNum>(
    SensorData_SensorNum_descriptor(), name, value);
}
// ===================================================================

class JointDegree PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UreMessage.JointDegree) */ {
 public:
  inline JointDegree() : JointDegree(nullptr) {}
  virtual ~JointDegree();
  explicit constexpr JointDegree(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JointDegree(const JointDegree& from);
  JointDegree(JointDegree&& from) noexcept
    : JointDegree() {
    *this = ::std::move(from);
  }

  inline JointDegree& operator=(const JointDegree& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointDegree& operator=(JointDegree&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JointDegree& default_instance() {
    return *internal_default_instance();
  }
  static inline const JointDegree* internal_default_instance() {
    return reinterpret_cast<const JointDegree*>(
               &_JointDegree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JointDegree& a, JointDegree& b) {
    a.Swap(&b);
  }
  inline void Swap(JointDegree* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointDegree* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JointDegree* New() const final {
    return CreateMaybeMessage<JointDegree>(nullptr);
  }

  JointDegree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointDegree>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointDegree& from);
  void MergeFrom(const JointDegree& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointDegree* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UreMessage.JointDegree";
  }
  protected:
  explicit JointDegree(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ure_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef JointDegree_FingerNum FingerNum;
  static constexpr FingerNum palm_finger_1_joint =
    JointDegree_FingerNum_palm_finger_1_joint;
  static constexpr FingerNum finger_1_joint_1 =
    JointDegree_FingerNum_finger_1_joint_1;
  static constexpr FingerNum finger_1_joint_2 =
    JointDegree_FingerNum_finger_1_joint_2;
  static constexpr FingerNum finger_1_joint_3 =
    JointDegree_FingerNum_finger_1_joint_3;
  static constexpr FingerNum palm_finger_2_joint =
    JointDegree_FingerNum_palm_finger_2_joint;
  static constexpr FingerNum finger_2_joint_1 =
    JointDegree_FingerNum_finger_2_joint_1;
  static constexpr FingerNum finger_2_joint_2 =
    JointDegree_FingerNum_finger_2_joint_2;
  static constexpr FingerNum finger_2_joint_3 =
    JointDegree_FingerNum_finger_2_joint_3;
  static constexpr FingerNum finger_middle_joint_1 =
    JointDegree_FingerNum_finger_middle_joint_1;
  static constexpr FingerNum finger_middle_joint_2 =
    JointDegree_FingerNum_finger_middle_joint_2;
  static constexpr FingerNum finger_middle_joint_3 =
    JointDegree_FingerNum_finger_middle_joint_3;
  static inline bool FingerNum_IsValid(int value) {
    return JointDegree_FingerNum_IsValid(value);
  }
  static constexpr FingerNum FingerNum_MIN =
    JointDegree_FingerNum_FingerNum_MIN;
  static constexpr FingerNum FingerNum_MAX =
    JointDegree_FingerNum_FingerNum_MAX;
  static constexpr int FingerNum_ARRAYSIZE =
    JointDegree_FingerNum_FingerNum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FingerNum_descriptor() {
    return JointDegree_FingerNum_descriptor();
  }
  template<typename T>
  static inline const std::string& FingerNum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FingerNum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FingerNum_Name.");
    return JointDegree_FingerNum_Name(enum_t_value);
  }
  static inline bool FingerNum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FingerNum* value) {
    return JointDegree_FingerNum_Parse(name, value);
  }

  typedef JointDegree_ArmNum ArmNum;
  static constexpr ArmNum shoulder_pan_joint =
    JointDegree_ArmNum_shoulder_pan_joint;
  static constexpr ArmNum shoulder_lift_joint =
    JointDegree_ArmNum_shoulder_lift_joint;
  static constexpr ArmNum elbow_joint =
    JointDegree_ArmNum_elbow_joint;
  static constexpr ArmNum wrist_1_joint =
    JointDegree_ArmNum_wrist_1_joint;
  static constexpr ArmNum wrist_2_joint =
    JointDegree_ArmNum_wrist_2_joint;
  static constexpr ArmNum wrist_3_joint =
    JointDegree_ArmNum_wrist_3_joint;
  static inline bool ArmNum_IsValid(int value) {
    return JointDegree_ArmNum_IsValid(value);
  }
  static constexpr ArmNum ArmNum_MIN =
    JointDegree_ArmNum_ArmNum_MIN;
  static constexpr ArmNum ArmNum_MAX =
    JointDegree_ArmNum_ArmNum_MAX;
  static constexpr int ArmNum_ARRAYSIZE =
    JointDegree_ArmNum_ArmNum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ArmNum_descriptor() {
    return JointDegree_ArmNum_descriptor();
  }
  template<typename T>
  static inline const std::string& ArmNum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ArmNum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ArmNum_Name.");
    return JointDegree_ArmNum_Name(enum_t_value);
  }
  static inline bool ArmNum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ArmNum* value) {
    return JointDegree_ArmNum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kArmDegreeListFieldNumber = 1,
    kFingerDegreeListFieldNumber = 2,
  };
  // repeated float arm_degree_list = 1;
  int arm_degree_list_size() const;
  private:
  int _internal_arm_degree_list_size() const;
  public:
  void clear_arm_degree_list();
  private:
  float _internal_arm_degree_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_arm_degree_list() const;
  void _internal_add_arm_degree_list(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_arm_degree_list();
  public:
  float arm_degree_list(int index) const;
  void set_arm_degree_list(int index, float value);
  void add_arm_degree_list(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      arm_degree_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_arm_degree_list();

  // repeated float finger_degree_list = 2;
  int finger_degree_list_size() const;
  private:
  int _internal_finger_degree_list_size() const;
  public:
  void clear_finger_degree_list();
  private:
  float _internal_finger_degree_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_finger_degree_list() const;
  void _internal_add_finger_degree_list(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_finger_degree_list();
  public:
  float finger_degree_list(int index) const;
  void set_finger_degree_list(int index, float value);
  void add_finger_degree_list(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      finger_degree_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_finger_degree_list();

  // @@protoc_insertion_point(class_scope:UreMessage.JointDegree)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > arm_degree_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > finger_degree_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ure_2eproto;
};
// -------------------------------------------------------------------

class SensorData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UreMessage.SensorData) */ {
 public:
  inline SensorData() : SensorData(nullptr) {}
  virtual ~SensorData();
  explicit constexpr SensorData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SensorData(const SensorData& from);
  SensorData(SensorData&& from) noexcept
    : SensorData() {
    *this = ::std::move(from);
  }

  inline SensorData& operator=(const SensorData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorData& operator=(SensorData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SensorData* internal_default_instance() {
    return reinterpret_cast<const SensorData*>(
               &_SensorData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SensorData& a, SensorData& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorData* New() const final {
    return CreateMaybeMessage<SensorData>(nullptr);
  }

  SensorData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorData& from);
  void MergeFrom(const SensorData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UreMessage.SensorData";
  }
  protected:
  explicit SensorData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ure_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SensorData_SensorNum SensorNum;
  static constexpr SensorNum elbow_joint_sensor =
    SensorData_SensorNum_elbow_joint_sensor;
  static constexpr SensorNum shoulder_lift_joint_sensor =
    SensorData_SensorNum_shoulder_lift_joint_sensor;
  static constexpr SensorNum shoulder_pan_joint_sensor =
    SensorData_SensorNum_shoulder_pan_joint_sensor;
  static constexpr SensorNum wrist_1_joint_sensor =
    SensorData_SensorNum_wrist_1_joint_sensor;
  static constexpr SensorNum wrist_2_joint_sensor =
    SensorData_SensorNum_wrist_2_joint_sensor;
  static constexpr SensorNum wrist_3_joint_sensor =
    SensorData_SensorNum_wrist_3_joint_sensor;
  static inline bool SensorNum_IsValid(int value) {
    return SensorData_SensorNum_IsValid(value);
  }
  static constexpr SensorNum SensorNum_MIN =
    SensorData_SensorNum_SensorNum_MIN;
  static constexpr SensorNum SensorNum_MAX =
    SensorData_SensorNum_SensorNum_MAX;
  static constexpr int SensorNum_ARRAYSIZE =
    SensorData_SensorNum_SensorNum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SensorNum_descriptor() {
    return SensorData_SensorNum_descriptor();
  }
  template<typename T>
  static inline const std::string& SensorNum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SensorNum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SensorNum_Name.");
    return SensorData_SensorNum_Name(enum_t_value);
  }
  static inline bool SensorNum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SensorNum* value) {
    return SensorData_SensorNum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kElbowFieldNumber = 1,
    kShoulderLiftFieldNumber = 2,
    kShoulderPanFieldNumber = 3,
    kWrist1FieldNumber = 4,
    kWrist2FieldNumber = 5,
    kWrist3FieldNumber = 6,
  };
  // required float elbow = 1;
  bool has_elbow() const;
  private:
  bool _internal_has_elbow() const;
  public:
  void clear_elbow();
  float elbow() const;
  void set_elbow(float value);
  private:
  float _internal_elbow() const;
  void _internal_set_elbow(float value);
  public:

  // required float shoulder_lift = 2;
  bool has_shoulder_lift() const;
  private:
  bool _internal_has_shoulder_lift() const;
  public:
  void clear_shoulder_lift();
  float shoulder_lift() const;
  void set_shoulder_lift(float value);
  private:
  float _internal_shoulder_lift() const;
  void _internal_set_shoulder_lift(float value);
  public:

  // required float shoulder_pan = 3;
  bool has_shoulder_pan() const;
  private:
  bool _internal_has_shoulder_pan() const;
  public:
  void clear_shoulder_pan();
  float shoulder_pan() const;
  void set_shoulder_pan(float value);
  private:
  float _internal_shoulder_pan() const;
  void _internal_set_shoulder_pan(float value);
  public:

  // required float wrist_1 = 4;
  bool has_wrist_1() const;
  private:
  bool _internal_has_wrist_1() const;
  public:
  void clear_wrist_1();
  float wrist_1() const;
  void set_wrist_1(float value);
  private:
  float _internal_wrist_1() const;
  void _internal_set_wrist_1(float value);
  public:

  // required float wrist_2 = 5;
  bool has_wrist_2() const;
  private:
  bool _internal_has_wrist_2() const;
  public:
  void clear_wrist_2();
  float wrist_2() const;
  void set_wrist_2(float value);
  private:
  float _internal_wrist_2() const;
  void _internal_set_wrist_2(float value);
  public:

  // required float wrist_3 = 6;
  bool has_wrist_3() const;
  private:
  bool _internal_has_wrist_3() const;
  public:
  void clear_wrist_3();
  float wrist_3() const;
  void set_wrist_3(float value);
  private:
  float _internal_wrist_3() const;
  void _internal_set_wrist_3(float value);
  public:

  // @@protoc_insertion_point(class_scope:UreMessage.SensorData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float elbow_;
  float shoulder_lift_;
  float shoulder_pan_;
  float wrist_1_;
  float wrist_2_;
  float wrist_3_;
  friend struct ::TableStruct_ure_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JointDegree

// repeated float arm_degree_list = 1;
inline int JointDegree::_internal_arm_degree_list_size() const {
  return arm_degree_list_.size();
}
inline int JointDegree::arm_degree_list_size() const {
  return _internal_arm_degree_list_size();
}
inline void JointDegree::clear_arm_degree_list() {
  arm_degree_list_.Clear();
}
inline float JointDegree::_internal_arm_degree_list(int index) const {
  return arm_degree_list_.Get(index);
}
inline float JointDegree::arm_degree_list(int index) const {
  // @@protoc_insertion_point(field_get:UreMessage.JointDegree.arm_degree_list)
  return _internal_arm_degree_list(index);
}
inline void JointDegree::set_arm_degree_list(int index, float value) {
  arm_degree_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:UreMessage.JointDegree.arm_degree_list)
}
inline void JointDegree::_internal_add_arm_degree_list(float value) {
  arm_degree_list_.Add(value);
}
inline void JointDegree::add_arm_degree_list(float value) {
  _internal_add_arm_degree_list(value);
  // @@protoc_insertion_point(field_add:UreMessage.JointDegree.arm_degree_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
JointDegree::_internal_arm_degree_list() const {
  return arm_degree_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
JointDegree::arm_degree_list() const {
  // @@protoc_insertion_point(field_list:UreMessage.JointDegree.arm_degree_list)
  return _internal_arm_degree_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
JointDegree::_internal_mutable_arm_degree_list() {
  return &arm_degree_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
JointDegree::mutable_arm_degree_list() {
  // @@protoc_insertion_point(field_mutable_list:UreMessage.JointDegree.arm_degree_list)
  return _internal_mutable_arm_degree_list();
}

// repeated float finger_degree_list = 2;
inline int JointDegree::_internal_finger_degree_list_size() const {
  return finger_degree_list_.size();
}
inline int JointDegree::finger_degree_list_size() const {
  return _internal_finger_degree_list_size();
}
inline void JointDegree::clear_finger_degree_list() {
  finger_degree_list_.Clear();
}
inline float JointDegree::_internal_finger_degree_list(int index) const {
  return finger_degree_list_.Get(index);
}
inline float JointDegree::finger_degree_list(int index) const {
  // @@protoc_insertion_point(field_get:UreMessage.JointDegree.finger_degree_list)
  return _internal_finger_degree_list(index);
}
inline void JointDegree::set_finger_degree_list(int index, float value) {
  finger_degree_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:UreMessage.JointDegree.finger_degree_list)
}
inline void JointDegree::_internal_add_finger_degree_list(float value) {
  finger_degree_list_.Add(value);
}
inline void JointDegree::add_finger_degree_list(float value) {
  _internal_add_finger_degree_list(value);
  // @@protoc_insertion_point(field_add:UreMessage.JointDegree.finger_degree_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
JointDegree::_internal_finger_degree_list() const {
  return finger_degree_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
JointDegree::finger_degree_list() const {
  // @@protoc_insertion_point(field_list:UreMessage.JointDegree.finger_degree_list)
  return _internal_finger_degree_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
JointDegree::_internal_mutable_finger_degree_list() {
  return &finger_degree_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
JointDegree::mutable_finger_degree_list() {
  // @@protoc_insertion_point(field_mutable_list:UreMessage.JointDegree.finger_degree_list)
  return _internal_mutable_finger_degree_list();
}

// -------------------------------------------------------------------

// SensorData

// required float elbow = 1;
inline bool SensorData::_internal_has_elbow() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SensorData::has_elbow() const {
  return _internal_has_elbow();
}
inline void SensorData::clear_elbow() {
  elbow_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float SensorData::_internal_elbow() const {
  return elbow_;
}
inline float SensorData::elbow() const {
  // @@protoc_insertion_point(field_get:UreMessage.SensorData.elbow)
  return _internal_elbow();
}
inline void SensorData::_internal_set_elbow(float value) {
  _has_bits_[0] |= 0x00000001u;
  elbow_ = value;
}
inline void SensorData::set_elbow(float value) {
  _internal_set_elbow(value);
  // @@protoc_insertion_point(field_set:UreMessage.SensorData.elbow)
}

// required float shoulder_lift = 2;
inline bool SensorData::_internal_has_shoulder_lift() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SensorData::has_shoulder_lift() const {
  return _internal_has_shoulder_lift();
}
inline void SensorData::clear_shoulder_lift() {
  shoulder_lift_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float SensorData::_internal_shoulder_lift() const {
  return shoulder_lift_;
}
inline float SensorData::shoulder_lift() const {
  // @@protoc_insertion_point(field_get:UreMessage.SensorData.shoulder_lift)
  return _internal_shoulder_lift();
}
inline void SensorData::_internal_set_shoulder_lift(float value) {
  _has_bits_[0] |= 0x00000002u;
  shoulder_lift_ = value;
}
inline void SensorData::set_shoulder_lift(float value) {
  _internal_set_shoulder_lift(value);
  // @@protoc_insertion_point(field_set:UreMessage.SensorData.shoulder_lift)
}

// required float shoulder_pan = 3;
inline bool SensorData::_internal_has_shoulder_pan() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SensorData::has_shoulder_pan() const {
  return _internal_has_shoulder_pan();
}
inline void SensorData::clear_shoulder_pan() {
  shoulder_pan_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float SensorData::_internal_shoulder_pan() const {
  return shoulder_pan_;
}
inline float SensorData::shoulder_pan() const {
  // @@protoc_insertion_point(field_get:UreMessage.SensorData.shoulder_pan)
  return _internal_shoulder_pan();
}
inline void SensorData::_internal_set_shoulder_pan(float value) {
  _has_bits_[0] |= 0x00000004u;
  shoulder_pan_ = value;
}
inline void SensorData::set_shoulder_pan(float value) {
  _internal_set_shoulder_pan(value);
  // @@protoc_insertion_point(field_set:UreMessage.SensorData.shoulder_pan)
}

// required float wrist_1 = 4;
inline bool SensorData::_internal_has_wrist_1() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SensorData::has_wrist_1() const {
  return _internal_has_wrist_1();
}
inline void SensorData::clear_wrist_1() {
  wrist_1_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float SensorData::_internal_wrist_1() const {
  return wrist_1_;
}
inline float SensorData::wrist_1() const {
  // @@protoc_insertion_point(field_get:UreMessage.SensorData.wrist_1)
  return _internal_wrist_1();
}
inline void SensorData::_internal_set_wrist_1(float value) {
  _has_bits_[0] |= 0x00000008u;
  wrist_1_ = value;
}
inline void SensorData::set_wrist_1(float value) {
  _internal_set_wrist_1(value);
  // @@protoc_insertion_point(field_set:UreMessage.SensorData.wrist_1)
}

// required float wrist_2 = 5;
inline bool SensorData::_internal_has_wrist_2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SensorData::has_wrist_2() const {
  return _internal_has_wrist_2();
}
inline void SensorData::clear_wrist_2() {
  wrist_2_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float SensorData::_internal_wrist_2() const {
  return wrist_2_;
}
inline float SensorData::wrist_2() const {
  // @@protoc_insertion_point(field_get:UreMessage.SensorData.wrist_2)
  return _internal_wrist_2();
}
inline void SensorData::_internal_set_wrist_2(float value) {
  _has_bits_[0] |= 0x00000010u;
  wrist_2_ = value;
}
inline void SensorData::set_wrist_2(float value) {
  _internal_set_wrist_2(value);
  // @@protoc_insertion_point(field_set:UreMessage.SensorData.wrist_2)
}

// required float wrist_3 = 6;
inline bool SensorData::_internal_has_wrist_3() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SensorData::has_wrist_3() const {
  return _internal_has_wrist_3();
}
inline void SensorData::clear_wrist_3() {
  wrist_3_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float SensorData::_internal_wrist_3() const {
  return wrist_3_;
}
inline float SensorData::wrist_3() const {
  // @@protoc_insertion_point(field_get:UreMessage.SensorData.wrist_3)
  return _internal_wrist_3();
}
inline void SensorData::_internal_set_wrist_3(float value) {
  _has_bits_[0] |= 0x00000020u;
  wrist_3_ = value;
}
inline void SensorData::set_wrist_3(float value) {
  _internal_set_wrist_3(value);
  // @@protoc_insertion_point(field_set:UreMessage.SensorData.wrist_3)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace UreMessage

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::UreMessage::JointDegree_FingerNum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UreMessage::JointDegree_FingerNum>() {
  return ::UreMessage::JointDegree_FingerNum_descriptor();
}
template <> struct is_proto_enum< ::UreMessage::JointDegree_ArmNum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UreMessage::JointDegree_ArmNum>() {
  return ::UreMessage::JointDegree_ArmNum_descriptor();
}
template <> struct is_proto_enum< ::UreMessage::SensorData_SensorNum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UreMessage::SensorData_SensorNum>() {
  return ::UreMessage::SensorData_SensorNum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ure_2eproto
